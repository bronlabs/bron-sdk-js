{
  "components" : {
    "schemas" : {
      "AccountType" : {
        "enum" : [ "vault" ],
        "type" : "string"
      },
      "ActivateParams" : {
        "properties" : {
          "assetId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Activate",
        "type" : "object"
      },
      "AddressActivationParams" : {
        "properties" : {
          "assetId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Address activation",
        "type" : "object"
      },
      "AddressCreationParams" : {
        "properties" : {
          "assetId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Address creation",
        "type" : "object"
      },
      "AllowanceParams" : {
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "assetId" : {
            "type" : "string"
          },
          "toAddress" : {
            "type" : "string"
          },
          "unlimited" : {
            "type" : "boolean"
          }
        },
        "required" : [ "assetId", "toAddress" ],
        "title" : "Allowance",
        "type" : "object"
      },
      "BlockchainRequest" : {
        "properties" : {
          "networkId" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "BlockchainSigningRequest" : {
        "properties" : { },
        "type" : "object"
      },
      "BlockchainTxDetails" : {
        "properties" : {
          "blockchainTxId" : {
            "description" : "ID of blockchain transaction",
            "examples" : [ "b79aae771ec6b779d97b10911bd938f5e18a92732c106e9dab4e33cd21ef7fb0" ],
            "type" : "string"
          },
          "networkId" : {
            "description" : "Network ID",
            "examples" : [ "BTC" ],
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "CancelTransaction" : {
        "properties" : {
          "reason" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "CreateTransaction" : {
        "properties" : {
          "accountId" : {
            "description" : "The id of the account where the transaction should be placed",
            "examples" : [ "w9jh0gf3w9qaxlre7enezt17" ],
            "type" : "string"
          },
          "expiresAt" : {
            "description" : "Optional expiration time for the transaction",
            "examples" : [ "1753370264978" ],
            "type" : "string"
          },
          "externalId" : {
            "description" : "Unique transaction identifier from client (should be unique per the account)",
            "examples" : [ "w2u573pjj5wl97p4v325z4a9" ],
            "type" : "string"
          },
          "params" : {
            "description" : "Transaction specific parameters",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/WithdrawalParams"
            }, {
              "$ref" : "#/components/schemas/ActivateParams"
            }, {
              "$ref" : "#/components/schemas/AddressActivationParams"
            }, {
              "$ref" : "#/components/schemas/AddressCreationParams"
            }, {
              "$ref" : "#/components/schemas/AllowanceParams"
            }, {
              "$ref" : "#/components/schemas/IntentsParams"
            }, {
              "$ref" : "#/components/schemas/SetupParams"
            }, {
              "$ref" : "#/components/schemas/StakeClaimParams"
            }, {
              "$ref" : "#/components/schemas/StakeDelegationParams"
            }, {
              "$ref" : "#/components/schemas/StakeUnDelegationParams"
            }, {
              "$ref" : "#/components/schemas/SwapParams"
            }, {
              "$ref" : "#/components/schemas/WithdrawalParams"
            } ]
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/TransactionType",
            "description" : "The transaction type. [See details](/enums/TransactionType)",
            "examples" : [ "withdrawal" ]
          }
        },
        "required" : [ "externalId", "transactionType", "accountId" ],
        "type" : "object"
      },
      "CreateTransactions" : {
        "properties" : {
          "transactions" : {
            "description" : "List of transactions to create",
            "items" : {
              "$ref" : "#/components/schemas/CreateTransaction"
            },
            "type" : "array"
          }
        },
        "required" : [ "transactions" ],
        "type" : "object"
      },
      "DepositParams" : {
        "properties" : {
          "amount" : {
            "description" : "The amount of transaction",
            "examples" : [ "10.123" ],
            "type" : "string"
          },
          "assetId" : {
            "description" : "The asset ID for the transaction",
            "examples" : [ "14212" ],
            "type" : "string"
          },
          "networkId" : {
            "description" : "The asset's blockchain network name for the transaction",
            "examples" : [ "ETH" ],
            "type" : "string"
          }
        },
        "required" : [ "amount", "assetId", "networkId" ],
        "type" : "object"
      },
      "FeeLevel" : {
        "enum" : [ "low", "medium", "high" ],
        "type" : "string"
      },
      "HashFunction" : {
        "enum" : [ "none", "sha256d", "keccak256", "blake2b256", "sha256", "sha512", "sha512_half", "sha512_256", "poseidon" ],
        "type" : "string"
      },
      "IntentsParams" : {
        "properties" : {
          "feeLevel" : {
            "$ref" : "#/components/schemas/FeeLevel",
            "description" : "[See details](/enums/FeeLevel)"
          },
          "intentId" : {
            "type" : "string"
          }
        },
        "required" : [ "intentId" ],
        "title" : "Intent",
        "type" : "object"
      },
      "KeyType" : {
        "enum" : [ "secp256k1", "edwards25519", "BLS12381G1", "pallas", "RSA4096" ],
        "type" : "string"
      },
      "MessageForSigning" : {
        "properties" : {
          "hashFunction" : {
            "$ref" : "#/components/schemas/HashFunction",
            "description" : "Hash function to apply to the message before signing. [See details](/enums/HashFunction)"
          },
          "keyType" : {
            "$ref" : "#/components/schemas/KeyType",
            "description" : "Type of cryptographic key to use for signing this message. [See details](/enums/KeyType)"
          },
          "message" : {
            "description" : "The message content that needs to be signed",
            "type" : "string"
          },
          "signatureScheme" : {
            "$ref" : "#/components/schemas/SignatureScheme",
            "description" : "Cryptographic signature scheme to use for signing. [See details](/enums/SignatureScheme)"
          },
          "signatureVariant" : {
            "$ref" : "#/components/schemas/SignatureVariant",
            "description" : "Specific variant of the signature scheme if applicable. [See details](/enums/SignatureVariant)"
          }
        },
        "type" : "object"
      },
      "MessagesForSigning" : {
        "properties" : {
          "messages" : {
            "description" : "List of individual messages that need to be cryptographically signed",
            "items" : {
              "$ref" : "#/components/schemas/MessageForSigning"
            },
            "type" : "array"
          },
          "publicKey" : {
            "description" : "Public key that corresponds to the private key used for signing these messages",
            "type" : "string"
          },
          "useBackupPrimitive" : {
            "description" : "Flag indicating whether to use backup cryptographic primitives for signing",
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "RawTransactionParams" : {
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "assetId" : {
            "type" : "string"
          },
          "data" : {
            "type" : "string"
          },
          "feeLevel" : {
            "$ref" : "#/components/schemas/FeeLevel",
            "description" : "[See details](/enums/FeeLevel)"
          },
          "rawTransactions" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "toAddress" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId", "toAddress" ],
        "type" : "object"
      },
      "RequestedNetworkFees" : {
        "properties" : {
          "feePerByte" : {
            "type" : "string"
          },
          "gasLimit" : {
            "type" : "string"
          },
          "gasPriceGwei" : {
            "type" : "string"
          },
          "maxFeePerGas" : {
            "type" : "string"
          },
          "maxPriorityFeePerGas" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "SetupParams" : {
        "properties" : {
          "assetId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Setup",
        "type" : "object"
      },
      "SignatureScheme" : {
        "enum" : [ "ecdsa", "eddsa", "bls", "schnorr", "rsa-pss" ],
        "type" : "string"
      },
      "SignatureVariant" : {
        "enum" : [ "zilliqa", "mina" ],
        "type" : "string"
      },
      "Signed" : {
        "properties" : { },
        "type" : "object"
      },
      "SigningRequest" : {
        "properties" : {
          "accountId" : {
            "description" : "The ID of the account",
            "examples" : [ "w9jh0gf3w9qaxlre7enezt17" ],
            "type" : "string"
          },
          "blockchainNonce" : {
            "description" : "Blockchain nonce number for transaction ordering if applicable",
            "type" : "string"
          },
          "messagesForSigning" : {
            "$ref" : "#/components/schemas/MessagesForSigning",
            "description" : "Messages that need to be signed for this request",
            "type" : "object"
          },
          "networkId" : {
            "description" : "Network identifier specifying which blockchain network to use",
            "type" : "string"
          },
          "requestParameters" : {
            "description" : "Initial request parameters required for blockchain services (flexible JSON structure)",
            "type" : "object"
          },
          "shouldBeBroadcasted" : {
            "description" : "Flag indicating whether the transaction should be broadcasted after signing",
            "type" : "boolean"
          },
          "signed" : {
            "$ref" : "#/components/schemas/Signed",
            "description" : "Final signed transaction data ready for broadcasting",
            "type" : "object"
          },
          "signingData" : {
            "$ref" : "#/components/schemas/BlockchainSigningRequest",
            "description" : "Blockchain transaction data that needs to be signed",
            "type" : "object"
          },
          "signingRequestId" : {
            "description" : "Unique identifier for this signing request",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/SigningRequestStatus",
            "description" : "Current status of the signing request. [See details](/enums/SigningRequestStatus)"
          },
          "transactionId" : {
            "description" : "Unique identifier of the transaction to be signed",
            "type" : "string"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/TransactionType",
            "description" : "Type of transaction being signed. [See details](/enums/TransactionType)"
          },
          "workspaceId" : {
            "description" : "The ID of the workspace",
            "examples" : [ "e191u51yxnykins6fahd" ],
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "SigningRequestStatus" : {
        "enum" : [ "new", "signed", "broadcasted", "under-rbf", "completed", "manual-resolving", "canceled", "error-on-broadcast", "failed-on-chain", "marked-as-error" ],
        "type" : "string"
      },
      "SortingDirection" : {
        "enum" : [ "ASC", "DESC" ],
        "type" : "string"
      },
      "StakeClaimParams" : {
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "assetId" : {
            "type" : "string"
          },
          "stakeId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Stake claim",
        "type" : "object"
      },
      "StakeDelegationParams" : {
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "assetId" : {
            "type" : "string"
          },
          "poolId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Stake delegation",
        "type" : "object"
      },
      "StakeUnDelegationParams" : {
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "assetId" : {
            "type" : "string"
          },
          "stakeId" : {
            "type" : "string"
          }
        },
        "required" : [ "assetId" ],
        "title" : "Stake undelegation",
        "type" : "object"
      },
      "SwapParams" : {
        "properties" : {
          "fromAmount" : {
            "type" : "string"
          },
          "fromAssetId" : {
            "type" : "string"
          },
          "quoteId" : {
            "type" : "string"
          },
          "toAmount" : {
            "type" : "string"
          },
          "toAssetId" : {
            "type" : "string"
          }
        },
        "required" : [ "fromAssetId", "toAssetId", "quoteId" ],
        "title" : "Swap",
        "type" : "object"
      },
      "Transaction" : {
        "properties" : {
          "accountId" : {
            "description" : "The ID of the account",
            "examples" : [ "w9jh0gf3w9qaxlre7enezt17" ],
            "type" : "string"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType",
            "description" : "The type of the account where the transaction should be placed. [See details](/enums/AccountType)"
          },
          "createdAt" : {
            "description" : "Transaction creation timestamp",
            "examples" : [ "1747241036052" ],
            "type" : "string"
          },
          "createdBy" : {
            "description" : "Creator user ID",
            "examples" : [ "e191u51yxnykins6fahdizxy" ],
            "type" : "string"
          },
          "embedded" : {
            "$ref" : "#/components/schemas/TransactionEmbedded",
            "description" : "Embedded related objects for this transaction",
            "type" : "object"
          },
          "expiresAt" : {
            "description" : "Transaction expiration timestamp",
            "examples" : [ "1747241036582" ],
            "type" : "string"
          },
          "externalId" : {
            "description" : "Unique transaction identifier from client (should be unique per account)",
            "examples" : [ "l2gzn31vga84q0qrhyw30inb" ],
            "type" : "string"
          },
          "extra" : {
            "$ref" : "#/components/schemas/TransactionExtra",
            "description" : "Additional transaction specific information",
            "type" : "object"
          },
          "params" : {
            "description" : "Initial transaction specific parameters",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/WithdrawalParams"
            }, {
              "$ref" : "#/components/schemas/SwapParams"
            }, {
              "$ref" : "#/components/schemas/ActivateParams"
            }, {
              "$ref" : "#/components/schemas/AddressActivationParams"
            }, {
              "$ref" : "#/components/schemas/AddressCreationParams"
            }, {
              "$ref" : "#/components/schemas/AllowanceParams"
            }, {
              "$ref" : "#/components/schemas/DepositParams"
            }, {
              "$ref" : "#/components/schemas/IntentsParams"
            }, {
              "$ref" : "#/components/schemas/RawTransactionParams"
            }, {
              "$ref" : "#/components/schemas/SetupParams"
            }, {
              "$ref" : "#/components/schemas/StakeClaimParams"
            }, {
              "$ref" : "#/components/schemas/StakeDelegationParams"
            }, {
              "$ref" : "#/components/schemas/StakeUnDelegationParams"
            } ]
          },
          "status" : {
            "$ref" : "#/components/schemas/TransactionStatus",
            "description" : "Transaction status. [See details](/enums/TransactionStatus)"
          },
          "terminatedAt" : {
            "description" : "Transaction termination timestamp",
            "examples" : [ "1747241036782" ],
            "type" : "string"
          },
          "transactionId" : {
            "description" : "Transaction ID",
            "examples" : [ "w2u573pjj5wl97p4v325z4a9" ],
            "type" : "string"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/TransactionType",
            "description" : "Transaction type. [See details](/enums/TransactionType)",
            "examples" : [ "deposit" ]
          },
          "updatedAt" : {
            "description" : "Transaction update timestamp",
            "examples" : [ "1747241089580" ],
            "type" : "string"
          },
          "workspaceId" : {
            "description" : "The ID of the workspace",
            "examples" : [ "e191u51yxnykins6fahd" ],
            "type" : "string"
          }
        },
        "required" : [ "transactionId", "externalId", "status", "transactionType", "workspaceId", "accountId", "accountType", "createdAt" ],
        "type" : "object"
      },
      "TransactionApprovers" : {
        "properties" : {
          "approvedBy" : {
            "description" : "User IDs who already approved this transaction",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "availableApprovers" : {
            "description" : "Users IDs who can approve this transaction",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "limitId" : {
            "description" : "ID of the transaction limit applied",
            "examples" : [ "w2u573pjj5wl97p4v325z4a9" ],
            "type" : "string"
          },
          "number" : {
            "description" : "Number of users required to approve this transaction",
            "examples" : [ "2" ],
            "type" : "string"
          },
          "securityDelayDuration" : {
            "description" : "Security delay duration in hours before transaction can be processed",
            "type" : "string"
          },
          "securityDelayExpiresAt" : {
            "description" : "Security delay expiration time in milliseconds",
            "type" : "string"
          },
          "skipApproval" : {
            "description" : "Skip approval process if set in the limit rule",
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "TransactionEmbedded" : {
        "properties" : {
          "currentSigningRequest" : {
            "$ref" : "#/components/schemas/SigningRequest",
            "description" : "Current signing request",
            "type" : "object"
          }
        },
        "type" : "object"
      },
      "TransactionExtra" : {
        "properties" : {
          "approvers" : {
            "$ref" : "#/components/schemas/TransactionApprovers",
            "type" : "object"
          },
          "blockchainDetails" : {
            "description" : "The blockchain transaction details on an transaction",
            "items" : {
              "$ref" : "#/components/schemas/BlockchainTxDetails"
            },
            "type" : "array"
          },
          "blockchainRequest" : {
            "$ref" : "#/components/schemas/BlockchainRequest",
            "type" : "object"
          },
          "confirmations" : {
            "description" : "Number of confirmations for a blockchain transaction",
            "examples" : [ "12" ],
            "type" : "string"
          },
          "depositTransactionId" : {
            "description" : "The ID of a deposit transaction where a withdraw was made to",
            "examples" : [ "j1r166mwjfxe6fejw4i2ucwm" ],
            "type" : "string"
          },
          "description" : {
            "description" : "The description of the transaction",
            "examples" : [ "Withdrawal to an exchange" ],
            "type" : "string"
          },
          "externalBroadcast" : {
            "description" : "Withdraw is requested to be processed by external system. In that case we don't broadcast it to blockchain",
            "type" : "boolean"
          },
          "fromAccountId" : {
            "description" : "The ID of a account where an order was made from",
            "examples" : [ "w9jh0gf3w9qaxlre7enezt17" ],
            "type" : "string"
          },
          "fromAddress" : {
            "description" : "The address where the funds were received",
            "examples" : [ "TSz8S8sfhWbaDKVH5bVM1U2rekX3Gr2zxY" ],
            "type" : "string"
          },
          "memo" : {
            "description" : "Withdrawal memo (destination tag for XRP)",
            "type" : "string"
          },
          "signingRequestId" : {
            "description" : "current signing request unique id",
            "type" : "string"
          },
          "toAccountId" : {
            "description" : "The ID of a account where an transaction was made to",
            "examples" : [ "t2pm9t9x4k0a3h353f369jk8" ],
            "type" : "string"
          },
          "toAddress" : {
            "description" : "The address where the funds should be transferred",
            "examples" : [ "tb1qaprk5xy6t0m8yjdlnxscxqn9ek23uaej09eeax" ],
            "type" : "string"
          },
          "withdrawTransactionId" : {
            "description" : "The ID of a withdraw transaction where a deposit was made from",
            "examples" : [ "altfrg6powi52w53sd7ts8vf" ],
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TransactionStatus" : {
        "enum" : [ "new", "waiting-confirmations", "waiting-approval", "approved", "awaiting-security-policy", "completed", "canceled", "expired", "signing-required", "signing", "signed", "broadcasted", "manual-resolving", "failed-on-blockchain", "removed-from-blockchain", "error" ],
        "type" : "string"
      },
      "TransactionType" : {
        "enum" : [ "deposit", "withdrawal", "multi-withdrawal", "negative-deposit", "auto-withdrawal", "allowance", "raw-transaction", "address-activation", "address-creation", "swap-lifi", "intents" ],
        "type" : "string"
      },
      "Transactions" : {
        "properties" : {
          "transactions" : {
            "items" : {
              "$ref" : "#/components/schemas/Transaction"
            },
            "type" : "array"
          }
        },
        "required" : [ "transactions" ],
        "type" : "object"
      },
      "WithdrawalParams" : {
        "properties" : {
          "amount" : {
            "description" : "The amount of transaction",
            "examples" : [ "10.123" ],
            "type" : "string"
          },
          "assetId" : {
            "description" : "The asset ID for the transaction",
            "examples" : [ "20145" ],
            "type" : "string"
          },
          "feeLevel" : {
            "$ref" : "#/components/schemas/FeeLevel",
            "default" : "medium",
            "description" : "The fee level for the withdrawal. [See details](/enums/FeeLevel)",
            "examples" : [ "medium" ]
          },
          "includeFee" : {
            "default" : "false",
            "description" : "Indicates whether the fee should be included in the withdrawal amount or added on top of it",
            "examples" : [ "false" ],
            "type" : "boolean"
          },
          "memo" : {
            "description" : "Memo for the transaction",
            "type" : "string"
          },
          "networkFees" : {
            "$ref" : "#/components/schemas/RequestedNetworkFees",
            "description" : "Custom network fees parameters",
            "type" : "object"
          },
          "networkId" : {
            "description" : "The asset's blockchain network name for the transaction",
            "examples" : [ "BTC" ],
            "type" : "string"
          },
          "symbol" : {
            "description" : "The asset's symbol for the transaction",
            "examples" : [ "BTC" ],
            "type" : "string"
          },
          "toAccountId" : {
            "description" : "In case of a transfer on a different account, the ID of the destination account",
            "examples" : [ "w9jh0gf3w9qaxlre7enezt17" ],
            "type" : "string"
          },
          "toAddress" : {
            "description" : "Destination address for the transaction",
            "examples" : [ "TKAduQVqNaTLyBzVvRrcctY6FFraowJ3Uc" ],
            "type" : "string"
          },
          "toAddressBookRecordId" : {
            "description" : "In case of a withdrawal to address from address book, the ID of the address book record",
            "examples" : [ "a30lin1p2zr1wzqqt1l8n652" ],
            "type" : "string"
          }
        },
        "required" : [ "amount" ],
        "title" : "Transfer",
        "type" : "object"
      }
    }
  },
  "info" : {
    "description" : "Bron API is based on the RESTish interface provided for data exchange between a client and a server with the use of HTTPS requests and responses.",
    "title" : "Bron API",
    "version" : "latest"
  },
  "openapi" : "3.1.0",
  "paths" : {
    "/workspaces/{workspaceId}/transactions" : {
      "get" : {
        "description" : "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters" : [ {
          "description" : "Comma-separated transaction ids",
          "in" : "query",
          "name" : "transactionIds",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated transaction types. [See details](/enums/TransactionType)",
          "in" : "query",
          "name" : "transactionTypes",
          "required" : false,
          "schema" : {
            "items" : {
              "$ref" : "#/components/schemas/TransactionType"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated account types. [See details](/enums/AccountType)",
          "in" : "query",
          "name" : "accountTypes",
          "required" : false,
          "schema" : {
            "items" : {
              "$ref" : "#/components/schemas/AccountType"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated account ids",
          "in" : "query",
          "name" : "accountIds",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated transaction statuses. [See details](/enums/TransactionStatus)",
          "in" : "query",
          "name" : "transactionStatuses",
          "required" : false,
          "schema" : {
            "items" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            },
            "type" : "array"
          }
        }, {
          "description" : "Comma-separated transaction statuses to filter out. [See details](/enums/TransactionStatus)",
          "in" : "query",
          "name" : "transactionStatusNotIn",
          "required" : false,
          "schema" : {
            "items" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            },
            "type" : "array"
          }
        }, {
          "description" : "Blockchain transaction id to filter",
          "in" : "query",
          "name" : "blockchainTxId",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Account ID to where the transaction was sent to",
          "in" : "query",
          "name" : "toAccountId",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Address to where the transaction was sent to",
          "in" : "query",
          "name" : "toAddress",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filer on only terminated transactions or not",
          "in" : "query",
          "name" : "isTerminated",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "description" : "Filter by terminated date since timestamp",
          "in" : "query",
          "name" : "terminatedAtFrom",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by terminated date until timestamp",
          "in" : "query",
          "name" : "terminatedAtTo",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by created date since timestamp",
          "in" : "query",
          "name" : "createdAtFrom",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by created date until timestamp",
          "in" : "query",
          "name" : "createdAtTo",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by updated date since timestamp",
          "in" : "query",
          "name" : "updatedAtFrom",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by updated date until timestamp",
          "in" : "query",
          "name" : "updatedAtTo",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter by deviceId that can sign this transaction",
          "in" : "query",
          "name" : "canSignWithDeviceId",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "[See details](/enums/SortingDirection)",
          "in" : "query",
          "name" : "sortDirection",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/SortingDirection",
            "type" : "string"
          }
        }, {
          "description" : "Limit for pagination",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : "1000",
            "type" : "string"
          }
        }, {
          "description" : "Offset for pagination",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : "0",
            "type" : "string"
          }
        }, {
          "description" : "External Id",
          "in" : "query",
          "name" : "externalId",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transactions"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Get Transactions",
        "tags" : [ "transactions" ]
      },
      "post" : {
        "description" : "Universal Create Transaction endpoint for moving on-chain assets with full control over parameters. Use it to:\n\n* Transfer base currencies (BTC, ETH, etc.) or any supported token between your own accounts.\n\n* Send funds to any external blockchain address — directly or via a saved address-book record.\n\n* Fine-tune fees and network settings.\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTransaction"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Create Transaction",
        "tags" : [ "transactions" ]
      }
    },
    "/workspaces/{workspaceId}/transactions/bulk-create" : {
      "post" : {
        "description" : "Bulk transactions creation. If the execution of an transaction fails, it will not affect the execution of other transactions. Failed transactions will be returned in the response. The bulk size should be less than 50 transactions.\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTransactions"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transactions"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Create Multiple Transactions",
        "tags" : [ "transactions" ]
      }
    },
    "/workspaces/{workspaceId}/transactions/dry-run" : {
      "post" : {
        "description" : "Simulate (test) transaction execution, returns estimations without executing the transaction\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTransaction"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Dry-Run Transaction",
        "tags" : [ "transactions" ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}" : {
      "get" : {
        "description" : "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "transactionId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Get Transaction by ID",
        "tags" : [ "transactions" ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}/cancel" : {
      "post" : {
        "description" : "<sup>API Key permissions: Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "transactionId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelTransaction"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Cancel Transaction",
        "tags" : [ "transactions" ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}/create-signing-request" : {
      "post" : {
        "description" : "Create signing request for an transaction\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters" : [ {
          "in" : "path",
          "name" : "workspaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "transactionId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "bad-request" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Bad Request"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "forbidden" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "error" : {
                      "description" : "The machine-readable error code",
                      "examples" : [ "conflict" ],
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "A human-readable message providing more details about the error",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "summary" : "Create signing request",
        "tags" : [ "transactions" ]
      }
    }
  },
  "servers" : [ {
    "description" : "app.bron.org",
    "url" : "https://api.bron.org"
  } ],
  "tags" : [ {
    "name" : "transactions"
  } ]
}
