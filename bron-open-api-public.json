{
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "accountId": {
            "examples": [
              "bin11066zbf15owuxn9ohrvg"
            ],
            "type": "string"
          },
          "accountName": {
            "examples": [
              "Default vault"
            ],
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType",
            "description": "[See details](/enums/AccountType)"
          },
          "createdAt": {
            "examples": [
              "1742572023000"
            ],
            "type": "string"
          },
          "createdBy": {
            "examples": [
              "htp1jwoa1qk8m8cw2dc8th4z"
            ],
            "type": "string"
          },
          "externalId": {
            "description": "Unique external ID for the account",
            "examples": [
              "aqm4857o9fvc1iyjm3vi72es"
            ],
            "type": "string"
          },
          "extra": {
            "$ref": "#/components/schemas/AccountExtra",
            "description": "Account extra data",
            "type": "object"
          },
          "isTestnet": {
            "description": "Flag to indicate if the account is a testnet account",
            "type": "boolean"
          },
          "parentAccountId": {
            "description": "Parent account ID",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus",
            "description": "[See details](/enums/AccountStatus)"
          },
          "updatedAt": {
            "examples": [
              "1742572023000"
            ],
            "type": "string"
          },
          "workspaceId": {
            "examples": [
              "liya1seswlrlydfpy5xzulsz"
            ],
            "type": "string"
          }
        },
        "required": [
          "accountId",
          "externalId",
          "accountType",
          "accountName",
          "status",
          "workspaceId",
          "createdAt"
        ],
        "type": "object"
      },
      "AccountExtra": {
        "properties": {},
        "type": "object"
      },
      "AccountStatus": {
        "enum": [
          "active",
          "archived",
          "shard-generating"
        ],
        "type": "string"
      },
      "AccountType": {
        "enum": [
          "vault"
        ],
        "type": "string"
      },
      "Accounts": {
        "properties": {
          "accounts": {
            "description": "List of accounts",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array"
          }
        },
        "required": [
          "accounts"
        ],
        "type": "object"
      },
      "ActivatedAsset": {
        "properties": {},
        "type": "object"
      },
      "Activities": {
        "properties": {
          "activities": {
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          }
        },
        "required": [
          "activities"
        ],
        "type": "object"
      },
      "Activity": {
        "properties": {
          "accountId": {
            "examples": [
              "ll14wqmznxm3zolsvkz0nqrw"
            ],
            "type": "string"
          },
          "activityId": {
            "examples": [
              "a5784c206f5caa516142a60f66122efe"
            ],
            "type": "string"
          },
          "activityType": {
            "$ref": "#/components/schemas/ActivityType",
            "description": "[See details](/enums/ActivityType)",
            "examples": [
              "account-creation"
            ]
          },
          "createdAt": {
            "examples": [
              "1742572023000"
            ],
            "type": "string"
          },
          "description": {
            "examples": [
              "Vault account was added. Safari 18"
            ],
            "type": "string"
          },
          "title": {
            "examples": [
              "Created Vault account"
            ],
            "type": "string"
          },
          "userId": {
            "examples": [
              "d9f0202766935f8e856a0309"
            ],
            "type": "string"
          },
          "workspaceId": {
            "examples": [
              "e191u51yxnykins6fahdizxy"
            ],
            "type": "string"
          }
        },
        "required": [
          "activityId",
          "activityType",
          "title",
          "createdAt"
        ],
        "type": "object"
      },
      "ActivityType": {
        "enum": [
          "login",
          "new-device-login",
          "new-address-book-record",
          "update-address-book-record",
          "delete-address-book-record",
          "workspace-creation",
          "workspace-settings-approval-update",
          "workspace-name-change",
          "workspace-tag-change",
          "only-address-book-withdrawals-settings-update",
          "transaction-approval-settings-update",
          "workspace-members-approval-update",
          "address-book-settings-approval-update",
          "transaction-limits-approval-settings-update",
          "member-creation",
          "service-member-creation",
          "transaction-limit-creation",
          "transaction-limit-update",
          "account-creation",
          "passkey-creation",
          "passkey-deletion",
          "2fa-change",
          "account-pins-reset",
          "shard-access-request-created",
          "shard-access-request-finished",
          "transaction-completed"
        ],
        "type": "string"
      },
      "Address": {
        "properties": {
          "acceptsAllAssets": {
            "description": "This parameter defines if this target is able to accept all tokens",
            "type": "boolean"
          },
          "accountId": {
            "examples": [
              "j6137n796rfoicme0rio4t4d"
            ],
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType",
            "description": "[See details](/enums/AccountType)"
          },
          "activatedAssets": {
            "description": "If tokens of a blockchain should be activated prior to any operation, this parameter includes a list of currencies to be activated with corresponding status - otherwise, the field is set as null",
            "items": {
              "$ref": "#/components/schemas/ActivatedAsset"
            },
            "type": "array"
          },
          "address": {
            "examples": [
              "bc1qqtk5wtw6tvfmvwkdvqw2a0f2m25qyn3cen5hj9"
            ],
            "type": "string"
          },
          "addressId": {
            "examples": [
              "rfztxmbbmn43qnnggsy569n6"
            ],
            "type": "string"
          },
          "createdAt": {
            "examples": [
              "1744369415583"
            ],
            "type": "string"
          },
          "createdBy": {
            "examples": [
              "2a0f2m25qyn3cen5hj"
            ],
            "type": "string"
          },
          "externalId": {
            "examples": [
              "xh2za6r3x3t9v8twfzey76y8"
            ],
            "type": "string"
          },
          "memo": {
            "type": "string"
          },
          "metadata": {
            "description": "Additional metadata you want to store with a new Deposit Target",
            "type": "object"
          },
          "networkId": {
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "requiresAssetsActivation": {
            "description": "This parameter defines if this target is able to accept all tokens",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus",
            "description": "[See details](/enums/AddressStatus)"
          },
          "updatedAt": {
            "examples": [
              "1744369415583"
            ],
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "workspaceId": {
            "examples": [
              "d2ciqls0nwz37yf90m94g0rn"
            ],
            "type": "string"
          }
        },
        "required": [
          "addressId",
          "externalId",
          "accountType",
          "status",
          "networkId",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt",
          "acceptsAllAssets",
          "requiresAssetsActivation"
        ],
        "type": "object"
      },
      "AddressBookRecord": {
        "properties": {
          "accountIds": {
            "description": "Comma-separated account ids, if address set for particular accounts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "address": {
            "description": "Blockchain address string",
            "examples": [
              "TKAduQVqNaTLyBzVvRrcctY6FFraowJ3Uc"
            ],
            "type": "string"
          },
          "createdAt": {
            "description": "Created at timestamp",
            "examples": [
              "1749646207296"
            ],
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user id",
            "examples": [
              "e191u51yxnykins6fahdizxy"
            ],
            "type": "string"
          },
          "externalId": {
            "description": "Address book entry external ID",
            "examples": [
              "ki50iq4iotxmuv1ihgw9q6u3"
            ],
            "type": "string"
          },
          "lastUsedAt": {
            "description": "Last used at",
            "examples": [
              "1749646207296"
            ],
            "type": "string"
          },
          "memo": {
            "description": "Address memo (destination tag for XRP)",
            "type": "string"
          },
          "name": {
            "description": "Name of the address",
            "examples": [
              "My address"
            ],
            "type": "string"
          },
          "networkId": {
            "description": "Currency of an address",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "recordId": {
            "description": "Address book record ID",
            "examples": [
              "gx8df95a09h319dbu79rfora"
            ],
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RecordStatus",
            "description": "[See details](/enums/RecordStatus)"
          },
          "updatedAt": {
            "description": "Last updated Updated at timestamp",
            "examples": [
              "1749646207296"
            ],
            "type": "string"
          },
          "updatedBy": {
            "description": "Updated by user id",
            "examples": [
              "e191u51yxnykins6fahdizxy"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "Workspace ID",
            "examples": [
              "e191u51yxnykins6fahd"
            ],
            "type": "string"
          }
        },
        "required": [
          "recordId",
          "externalId",
          "workspaceId",
          "networkId",
          "name",
          "status",
          "address",
          "createdAt"
        ],
        "type": "object"
      },
      "AddressBookRecords": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/AddressBookRecord"
            },
            "type": "array"
          }
        },
        "required": [
          "records"
        ],
        "type": "object"
      },
      "AddressStatus": {
        "enum": [
          "new",
          "pending",
          "address-activation-required",
          "address-creation-required",
          "approval-pending",
          "enabled",
          "disabled",
          "error",
          "account-archived"
        ],
        "type": "string"
      },
      "Addresses": {
        "properties": {
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "type": "array"
          }
        },
        "required": [
          "addresses"
        ],
        "type": "object"
      },
      "Asset": {
        "properties": {
          "assetId": {
            "description": "The unique ID for this asset",
            "examples": [
              "10001"
            ],
            "type": "string"
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetType",
            "description": "What kind of asset this is. [See details](/enums/AssetType)"
          },
          "contractInformation": {
            "$ref": "#/components/schemas/SmartContractInformation",
            "description": "For crypto tokens, this contains the smart contract address and other technical blockchain details.",
            "type": "object"
          },
          "decimals": {
            "description": "How many decimal places this asset can be split into",
            "examples": [
              "18"
            ],
            "type": "string"
          },
          "networkId": {
            "description": "Which blockchain network this asset lives on (like Ethereum, Bitcoin). Only needed for crypto tokens - not used for regular money or exchange assets",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "symbolId": {
            "description": "Points to the symbol that represents this asset (which stores symbol, name, icon etc.)",
            "examples": [
              "s23378"
            ],
            "type": "string"
          },
          "verified": {
            "description": "True if we've confirmed this is the real, official token (not a fake/scam copy). Helps you avoid fraudulent tokens with similar names.",
            "type": "boolean"
          }
        },
        "required": [
          "assetId"
        ],
        "type": "object"
      },
      "AssetType": {
        "enum": [
          "blockchain",
          "exchange",
          "fiat"
        ],
        "type": "string"
      },
      "Assets": {
        "properties": {
          "assets": {
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Balance": {
        "properties": {
          "accountId": {
            "description": "Account ID",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType",
            "description": "Type of the account. [See details](/enums/AccountType)"
          },
          "assetId": {
            "description": "Asset ID",
            "examples": [
              "10001"
            ],
            "type": "string"
          },
          "balanceId": {
            "description": "Balance ID",
            "examples": [
              "rcyv3tsc53opdiz7xgrujvg0"
            ],
            "type": "string"
          },
          "createdAt": {
            "description": "Created at timestamp",
            "examples": [
              "1744369502340"
            ],
            "type": "string"
          },
          "networkId": {
            "description": "Network ID",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "symbol": {
            "description": "Asset symbol",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "totalBalance": {
            "description": "The overall balance of a account",
            "examples": [
              "0.00021084"
            ],
            "type": "string"
          },
          "updatedAt": {
            "description": "Last updated at timestamp",
            "examples": [
              "1744372384276"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "Workspace ID",
            "examples": [
              "e191u51yxnykins6fahd"
            ],
            "type": "string"
          }
        },
        "required": [
          "balanceId",
          "accountId",
          "accountType",
          "workspaceId",
          "assetId"
        ],
        "type": "object"
      },
      "Balances": {
        "properties": {
          "balances": {
            "description": "List of balances",
            "items": {
              "$ref": "#/components/schemas/Balance"
            },
            "type": "array"
          }
        },
        "required": [
          "balances"
        ],
        "type": "object"
      },
      "BlockchainRequest": {
        "properties": {
          "networkId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BlockchainSigningRequest": {
        "properties": {},
        "type": "object"
      },
      "BlockchainTxDetails": {
        "properties": {
          "blockchainTxId": {
            "description": "ID of blockchain transaction",
            "examples": [
              "b79aae771ec6b779d97b10911bd938f5e18a92732c106e9dab4e33cd21ef7fb0"
            ],
            "type": "string"
          },
          "networkId": {
            "description": "Network ID",
            "examples": [
              "BTC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CancelTransaction": {
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAddressBookRecord": {
        "properties": {
          "accountIds": {
            "description": "Comma-separated account ids, if address set for particular accounts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "address": {
            "description": "Address",
            "type": "string"
          },
          "externalId": {
            "description": "Address book entry external ID",
            "type": "string"
          },
          "memo": {
            "description": "Address memo (destination tag for XRP)",
            "type": "string"
          },
          "name": {
            "description": "Name of the address",
            "type": "string"
          },
          "networkId": {
            "description": "Blockchain Network Id of an address",
            "type": "string"
          }
        },
        "required": [
          "externalId",
          "networkId",
          "name",
          "address"
        ],
        "type": "object"
      },
      "CreateTransaction": {
        "properties": {
          "accountId": {
            "description": "The id of the account where the transaction should be placed",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "expiresAt": {
            "description": "Optional expiration time for the transaction",
            "examples": [
              "1753370264978"
            ],
            "type": "string"
          },
          "externalId": {
            "description": "Unique transaction identifier from client (should be unique per the account)",
            "examples": [
              "w2u573pjj5wl97p4v325z4a9"
            ],
            "type": "string"
          },
          "params": {
            "description": "Transaction specific parameters",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WithdrawalParams"
              }
            ]
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "The transaction type. [See details](/enums/TransactionType)",
            "examples": [
              "withdrawal"
            ]
          }
        },
        "required": [
          "externalId",
          "transactionType",
          "accountId"
        ],
        "type": "object"
      },
      "CreateTransactions": {
        "properties": {
          "transactions": {
            "description": "List of transactions to create",
            "items": {
              "$ref": "#/components/schemas/CreateTransaction"
            },
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "FeeLevel": {
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "type": "string"
      },
      "HashFunction": {
        "enum": [
          "none",
          "sha256d",
          "keccak256",
          "blake2b256",
          "sha256",
          "sha512",
          "sha512_half",
          "sha512_256",
          "poseidon"
        ],
        "type": "string"
      },
      "Identity": {
        "properties": {
          "createdAt": {
            "examples": [
              "1749637592257"
            ],
            "type": "string"
          },
          "createdBy": {
            "examples": [
              "b20ca4a07143d20126634d3da2c"
            ],
            "type": "string"
          },
          "identityId": {
            "examples": [
              "775427b3b45c354145ca0e4c42"
            ],
            "type": "string"
          },
          "identityType": {
            "$ref": "#/components/schemas/IdentityType",
            "description": "[See details](/enums/IdentityType)"
          },
          "identityValue": {
            "examples": [
              "developer@bron.org"
            ],
            "type": "string"
          },
          "lastUsedAt": {
            "examples": [
              "1749637592257"
            ],
            "type": "string"
          },
          "updatedAt": {
            "examples": [
              "1749637592257"
            ],
            "type": "string"
          },
          "userId": {
            "examples": [
              "b20ca4a07143d20126634d3da2c"
            ],
            "type": "string"
          }
        },
        "required": [
          "identityId",
          "userId",
          "identityType",
          "identityValue",
          "createdAt"
        ],
        "type": "object"
      },
      "IdentityType": {
        "enum": [
          "email"
        ],
        "type": "string"
      },
      "KeyType": {
        "enum": [
          "secp256k1",
          "edwards25519",
          "BLS12381G1",
          "pallas",
          "RSA4096"
        ],
        "type": "string"
      },
      "LimitAmount": {
        "properties": {
          "amount": {
            "description": "Amount in USD",
            "examples": [
              "1000"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "LimitAppliesTo": {
        "properties": {
          "userIds": {
            "description": "List of user IDs for which the limit will apply",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LimitDestinations": {
        "properties": {
          "accountIds": {
            "description": "Apply to withdrawals made to particular Accounts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "addressBookRecordIds": {
            "description": "Apply to withdrawals made to particular Address Book records",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "toAccounts": {
            "description": "Apply to withdrawals made to Accounts",
            "type": "boolean"
          },
          "toAddressBook": {
            "description": "Apply to withdrawals made to Address Book records",
            "type": "boolean"
          },
          "toExternalAddresses": {
            "description": "Apply to all withdrawal to external (non Address Book) addresses",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LimitRule": {
        "properties": {
          "approve": {
            "$ref": "#/components/schemas/LimitRuleApprove",
            "type": "object"
          },
          "securityDelay": {
            "$ref": "#/components/schemas/LimitRuleSecurityDelay",
            "type": "object"
          },
          "skipApproval": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LimitRuleApprove": {
        "properties": {
          "authorisedApproversUserIds": {
            "description": "List of users that are allowed to approve transactions",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "numberOfApprovals": {
            "examples": [
              "2"
            ],
            "type": "string"
          }
        },
        "required": [
          "numberOfApprovals"
        ],
        "type": "object"
      },
      "LimitRuleSecurityDelay": {
        "properties": {
          "durationHours": {
            "description": "Duration of the transaction security delay in hours",
            "type": "string"
          }
        },
        "required": [
          "durationHours"
        ],
        "type": "object"
      },
      "LimitSources": {
        "properties": {
          "accountIds": {
            "description": "Apply to withdrawals made from accounts IDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LimitTransactionParams": {
        "properties": {
          "aboveAmount": {
            "$ref": "#/components/schemas/LimitAmount",
            "type": "object"
          },
          "durationHours": {
            "examples": [
              "24"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MemberStatus": {
        "enum": [
          "new",
          "active",
          "rejected",
          "deactivated"
        ],
        "type": "string"
      },
      "MessageForSigning": {
        "properties": {
          "hashFunction": {
            "$ref": "#/components/schemas/HashFunction",
            "description": "Hash function to apply to the message before signing. [See details](/enums/HashFunction)"
          },
          "keyType": {
            "$ref": "#/components/schemas/KeyType",
            "description": "Type of cryptographic key to use for signing this message. [See details](/enums/KeyType)"
          },
          "message": {
            "description": "The message content that needs to be signed",
            "type": "string"
          },
          "signatureScheme": {
            "$ref": "#/components/schemas/SignatureScheme",
            "description": "Cryptographic signature scheme to use for signing. [See details](/enums/SignatureScheme)"
          },
          "signatureVariant": {
            "$ref": "#/components/schemas/SignatureVariant",
            "description": "Specific variant of the signature scheme if applicable"
          }
        },
        "type": "object"
      },
      "MessagesForSigning": {
        "properties": {
          "messages": {
            "description": "List of individual messages that need to be cryptographically signed",
            "items": {
              "$ref": "#/components/schemas/MessageForSigning"
            },
            "type": "array"
          },
          "publicKey": {
            "description": "Public key that corresponds to the private key used for signing these messages",
            "type": "string"
          },
          "useBackupPrimitive": {
            "description": "Flag indicating whether to use backup cryptographic primitives for signing",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Network": {
        "properties": {
          "addressExplorerUrl": {
            "description": "Website URL where you can look up addresses on this network",
            "examples": [
              "https://etherscan.io/address/"
            ],
            "type": "string"
          },
          "confirmations": {
            "description": "How many block confirmations are needed before a transaction is considered final and safe",
            "examples": [
              "6"
            ],
            "type": "string"
          },
          "explorerUrl": {
            "description": "Website URL where you can look up transactions on this network",
            "examples": [
              "https://etherscan.io/tx/"
            ],
            "type": "string"
          },
          "isTestnet": {
            "description": "True if this is a test network used for development/testing (not real money)",
            "type": "boolean"
          },
          "name": {
            "description": "The human-readable name of this network that users will see",
            "examples": [
              "Ethereum"
            ],
            "type": "string"
          },
          "networkId": {
            "description": "The unique ID for this blockchain network",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "tags": {
            "description": "[See details](/enums/NetworkTag)",
            "items": {
              "$ref": "#/components/schemas/NetworkTag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NetworkTag": {
        "enum": [
          "show-vault",
          "supports-rbf",
          "supports-memo",
          "swap",
          "supports-parallel-signing",
          "supports-chained-signing"
        ],
        "type": "string"
      },
      "Networks": {
        "properties": {
          "networks": {
            "items": {
              "$ref": "#/components/schemas/Network"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RecordStatus": {
        "enum": [
          "new",
          "active",
          "rejected",
          "deleted"
        ],
        "type": "string"
      },
      "RequestedNetworkFees": {
        "properties": {
          "feePerByte": {
            "type": "string"
          },
          "gasLimit": {
            "type": "string"
          },
          "gasPriceGwei": {
            "type": "string"
          },
          "maxFeePerGas": {
            "type": "string"
          },
          "maxPriorityFeePerGas": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SignatureScheme": {
        "enum": [
          "ecdsa",
          "eddsa",
          "bls",
          "schnorr",
          "rsa-pss"
        ],
        "type": "string"
      },
      "SignatureVariant": {
        "enum": [
          "zilliqa",
          "mina"
        ],
        "type": "string"
      },
      "Signed": {
        "properties": {},
        "type": "object"
      },
      "SigningRequest": {
        "properties": {
          "accountId": {
            "description": "The ID of the account",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "blockchainNonce": {
            "description": "Blockchain nonce number for transaction ordering if applicable",
            "type": "string"
          },
          "messagesForSigning": {
            "$ref": "#/components/schemas/MessagesForSigning",
            "description": "Messages that need to be signed for this request",
            "type": "object"
          },
          "networkId": {
            "description": "Network identifier specifying which blockchain network to use",
            "type": "string"
          },
          "requestParameters": {
            "description": "Initial request parameters required for blockchain services (flexible JSON structure)",
            "type": "object"
          },
          "shouldBeBroadcasted": {
            "description": "Flag indicating whether the transaction should be broadcasted after signing",
            "type": "boolean"
          },
          "signed": {
            "$ref": "#/components/schemas/Signed",
            "description": "Final signed transaction data ready for broadcasting",
            "type": "object"
          },
          "signingData": {
            "$ref": "#/components/schemas/BlockchainSigningRequest",
            "description": "Blockchain transaction data that needs to be signed",
            "type": "object"
          },
          "signingRequestId": {
            "description": "Unique identifier for this signing request",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SigningRequestStatus",
            "description": "Current status of the signing request. [See details](/enums/SigningRequestStatus)"
          },
          "transactionId": {
            "description": "Unique identifier of the transaction to be signed",
            "type": "string"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Type of transaction being signed. [See details](/enums/TransactionType)"
          },
          "workspaceId": {
            "description": "The ID of the workspace",
            "examples": [
              "e191u51yxnykins6fahd"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SigningRequestStatus": {
        "enum": [
          "new",
          "signed",
          "broadcasted",
          "under-rbf",
          "completed",
          "manual-resolving",
          "canceled",
          "error-on-broadcast",
          "failed-on-chain",
          "marked-as-error"
        ],
        "type": "string"
      },
      "SmartContractInformation": {
        "properties": {
          "contractAddress": {
            "examples": [
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SortingDirection": {
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      },
      "Stakes": {
        "properties": {},
        "type": "object"
      },
      "SwapParams": {
        "properties": {
          "fromAmount": {
            "type": "string"
          },
          "fromAssetId": {
            "type": "string"
          },
          "quoteId": {
            "type": "string"
          },
          "toAmount": {
            "type": "string"
          },
          "toAssetId": {
            "type": "string"
          }
        },
        "required": [
          "fromAssetId",
          "toAssetId",
          "quoteId"
        ],
        "title": "Swap",
        "type": "object"
      },
      "Symbol": {
        "properties": {
          "name": {
            "description": "The full name of what this symbol represents",
            "examples": [
              "Bitcoin"
            ],
            "type": "string"
          },
          "symbol": {
            "description": "The ticker symbol that traders and users recognize",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "symbolId": {
            "description": "The unique ID for this symbol",
            "examples": [
              "s20012"
            ],
            "type": "string"
          }
        },
        "required": [
          "symbolId",
          "symbol",
          "name"
        ],
        "type": "object"
      },
      "SymbolMarketPrice": {
        "properties": {
          "baseSymbolId": {
            "description": "The symbol you're getting the price for",
            "examples": [
              "s2001"
            ],
            "type": "string"
          },
          "price": {
            "description": "The actual market price - how much one unit of the base symbol costs in the quote symbol. For example, if Bitcoin costs $145,000 USD, this would be 145000",
            "examples": [
              "145000"
            ],
            "type": "string"
          },
          "quoteSymbolId": {
            "description": "The currency the price is shown in",
            "examples": [
              "s09"
            ],
            "type": "string"
          }
        },
        "required": [
          "baseSymbolId",
          "quoteSymbolId",
          "price"
        ],
        "type": "object"
      },
      "SymbolMarketPrices": {
        "properties": {
          "prices": {
            "items": {
              "$ref": "#/components/schemas/SymbolMarketPrice"
            },
            "type": "array"
          }
        },
        "required": [
          "prices"
        ],
        "type": "object"
      },
      "Symbols": {
        "properties": {
          "symbols": {
            "items": {
              "$ref": "#/components/schemas/Symbol"
            },
            "type": "array"
          }
        },
        "required": [
          "symbols"
        ],
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "accountId": {
            "description": "The ID of the account",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType",
            "description": "The type of the account where the transaction should be placed. [See details](/enums/AccountType)"
          },
          "createdAt": {
            "description": "Transaction creation timestamp",
            "examples": [
              "1747241036052"
            ],
            "type": "string"
          },
          "createdBy": {
            "description": "Creator user ID",
            "examples": [
              "e191u51yxnykins6fahdizxy"
            ],
            "type": "string"
          },
          "embedded": {
            "$ref": "#/components/schemas/TransactionEmbedded",
            "description": "Embedded related objects for this transaction",
            "type": "object"
          },
          "expiresAt": {
            "description": "Transaction expiration timestamp",
            "examples": [
              "1747241036582"
            ],
            "type": "string"
          },
          "externalId": {
            "description": "Unique transaction identifier from client (should be unique per account)",
            "examples": [
              "l2gzn31vga84q0qrhyw30inb"
            ],
            "type": "string"
          },
          "extra": {
            "$ref": "#/components/schemas/TransactionExtra",
            "description": "Additional transaction specific information",
            "type": "object"
          },
          "params": {
            "description": "Initial transaction specific parameters",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WithdrawalParams"
              },
              {
                "$ref": "#/components/schemas/SwapParams"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "Transaction status. [See details](/enums/TransactionStatus)"
          },
          "terminatedAt": {
            "description": "Transaction termination timestamp",
            "examples": [
              "1747241036782"
            ],
            "type": "string"
          },
          "transactionId": {
            "description": "Transaction ID",
            "examples": [
              "w2u573pjj5wl97p4v325z4a9"
            ],
            "type": "string"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Transaction type. [See details](/enums/TransactionType)",
            "examples": [
              "deposit"
            ]
          },
          "updatedAt": {
            "description": "Transaction update timestamp",
            "examples": [
              "1747241089580"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "The ID of the workspace",
            "examples": [
              "e191u51yxnykins6fahd"
            ],
            "type": "string"
          }
        },
        "required": [
          "transactionId",
          "externalId",
          "status",
          "transactionType",
          "workspaceId",
          "accountId",
          "accountType",
          "createdAt"
        ],
        "type": "object"
      },
      "TransactionApprovers": {
        "properties": {
          "approvedBy": {
            "description": "User IDs who already approved this transaction",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "availableApprovers": {
            "description": "Users IDs who can approve this transaction",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limitId": {
            "description": "ID of the transaction limit applied",
            "examples": [
              "w2u573pjj5wl97p4v325z4a9"
            ],
            "type": "string"
          },
          "number": {
            "description": "Number of users required to approve this transaction",
            "examples": [
              "2"
            ],
            "type": "string"
          },
          "securityDelayDuration": {
            "description": "Security delay duration in hours before transaction can be processed",
            "type": "string"
          },
          "securityDelayExpiresAt": {
            "description": "Security delay expiration time in milliseconds",
            "type": "string"
          },
          "skipApproval": {
            "description": "Skip approval process if set in the limit rule",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TransactionEmbedded": {
        "properties": {
          "currentSigningRequest": {
            "$ref": "#/components/schemas/SigningRequest",
            "description": "Current signing request",
            "type": "object"
          }
        },
        "type": "object"
      },
      "TransactionExtra": {
        "properties": {
          "approvers": {
            "$ref": "#/components/schemas/TransactionApprovers",
            "type": "object"
          },
          "blockchainDetails": {
            "description": "The blockchain transaction details on an transaction",
            "items": {
              "$ref": "#/components/schemas/BlockchainTxDetails"
            },
            "type": "array"
          },
          "blockchainRequest": {
            "$ref": "#/components/schemas/BlockchainRequest",
            "type": "object"
          },
          "confirmations": {
            "description": "Number of confirmations for a blockchain transaction",
            "examples": [
              "12"
            ],
            "type": "string"
          },
          "depositTransactionId": {
            "description": "The ID of a deposit transaction where a withdraw was made to",
            "examples": [
              "j1r166mwjfxe6fejw4i2ucwm"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of the transaction",
            "examples": [
              "Withdrawal to an exchange"
            ],
            "type": "string"
          },
          "externalBroadcast": {
            "description": "Withdraw is requested to be processed by external system. In that case we don't broadcast it to blockchain",
            "type": "boolean"
          },
          "fromAccountId": {
            "description": "The ID of a account where an order was made from",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "fromAddress": {
            "description": "The address where the funds were received",
            "examples": [
              "TSz8S8sfhWbaDKVH5bVM1U2rekX3Gr2zxY"
            ],
            "type": "string"
          },
          "memo": {
            "description": "Withdrawal memo (destination tag for XRP)",
            "type": "string"
          },
          "signingRequestId": {
            "description": "current signing request unique id",
            "type": "string"
          },
          "toAccountId": {
            "description": "The ID of a account where an transaction was made to",
            "examples": [
              "t2pm9t9x4k0a3h353f369jk8"
            ],
            "type": "string"
          },
          "toAddress": {
            "description": "The address where the funds should be transferred",
            "examples": [
              "tb1qaprk5xy6t0m8yjdlnxscxqn9ek23uaej09eeax"
            ],
            "type": "string"
          },
          "withdrawTransactionId": {
            "description": "The ID of a withdraw transaction where a deposit was made from",
            "examples": [
              "altfrg6powi52w53sd7ts8vf"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionLimit": {
        "properties": {
          "appliesTo": {
            "$ref": "#/components/schemas/LimitAppliesTo",
            "type": "object"
          },
          "createdAt": {
            "examples": [
              "1745344441863"
            ],
            "type": "string"
          },
          "createdBy": {
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "destinations": {
            "$ref": "#/components/schemas/LimitDestinations",
            "type": "object"
          },
          "externalId": {
            "examples": [
              "pzkcv5thuuuk91hbv6qgko4x"
            ],
            "type": "string"
          },
          "limitId": {
            "examples": [
              "m11gwfggyjcqyhwhjllzs8qq"
            ],
            "type": "string"
          },
          "limitRule": {
            "$ref": "#/components/schemas/LimitRule",
            "type": "object"
          },
          "limitType": {
            "$ref": "#/components/schemas/TransactionLimitType",
            "description": "[See details](/enums/TransactionLimitType)"
          },
          "sources": {
            "$ref": "#/components/schemas/LimitSources",
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionLimitStatus",
            "description": "[See details](/enums/TransactionLimitStatus)"
          },
          "transactionParams": {
            "$ref": "#/components/schemas/LimitTransactionParams",
            "type": "object"
          },
          "updatedAt": {
            "examples": [
              "1745344441863"
            ],
            "type": "string"
          },
          "updatedBy": {
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "workspaceId": {
            "examples": [
              "e191u51yxnykins6fahd"
            ],
            "type": "string"
          }
        },
        "required": [
          "limitId",
          "externalId",
          "workspaceId",
          "limitType",
          "transactionParams",
          "sources",
          "destinations",
          "appliesTo",
          "limitRule",
          "status",
          "createdAt"
        ],
        "type": "object"
      },
      "TransactionLimitStatus": {
        "enum": [
          "new",
          "active",
          "deactivated",
          "declined"
        ],
        "type": "string"
      },
      "TransactionLimitType": {
        "enum": [
          "transactions-volume",
          "transaction-amount"
        ],
        "type": "string"
      },
      "TransactionLimits": {
        "properties": {
          "limits": {
            "items": {
              "$ref": "#/components/schemas/TransactionLimit"
            },
            "type": "array"
          }
        },
        "required": [
          "limits"
        ],
        "type": "object"
      },
      "TransactionStatus": {
        "enum": [
          "new",
          "waiting-confirmations",
          "waiting-approval",
          "approved",
          "awaiting-security-policy",
          "completed",
          "canceled",
          "expired",
          "signing-required",
          "signing",
          "signed",
          "broadcasted",
          "manual-resolving",
          "failed-on-blockchain",
          "error"
        ],
        "type": "string"
      },
      "TransactionType": {
        "enum": [
          "deposit",
          "withdrawal",
          "multi-withdrawal",
          "negative-deposit",
          "auto-withdrawal",
          "allowance",
          "raw-transaction",
          "address-activation",
          "address-creation",
          "swap-lifi",
          "intents"
        ],
        "type": "string"
      },
      "Transactions": {
        "properties": {
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "Unit": {
        "properties": {},
        "type": "object"
      },
      "User": {
        "properties": {
          "allowedIps": {
            "description": "IPs allowed to sign in",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "Created at timestamp in milliseconds",
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user ID",
            "type": "string"
          },
          "lastSignInAt": {
            "description": "Last sign in at timestamp in milliseconds",
            "type": "string"
          },
          "userId": {
            "description": "The user ID",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "type": "object"
      },
      "UserProfile": {
        "properties": {
          "imageId": {
            "examples": [
              "users/logos/cd9775427b3b45c354145ca0e4c428c5aad596f4c70a7337e64bfe766f1fc098.png"
            ],
            "type": "string"
          },
          "name": {
            "examples": [
              "Bron Developer"
            ],
            "type": "string"
          },
          "userId": {
            "examples": [
              "b20ca4a07143d20126634d3da2c"
            ],
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "type": "object"
      },
      "WebhookEvent": {
        "properties": {
          "event": {
            "description": "Webhook event type",
            "type": "string"
          },
          "eventId": {
            "description": "Webhook event id",
            "type": "string"
          },
          "payload": {
            "description": "Webhook payload",
            "type": "object"
          },
          "subscriptionId": {
            "description": "Webhook subscription id",
            "type": "string"
          }
        },
        "required": [
          "eventId",
          "event",
          "subscriptionId",
          "payload"
        ],
        "type": "object"
      },
      "WithdrawalParams": {
        "properties": {
          "amount": {
            "description": "The amount of transaction",
            "examples": [
              "10.123"
            ],
            "type": "string"
          },
          "assetId": {
            "description": "The asset ID for the transaction",
            "examples": [
              "20145"
            ],
            "type": "string"
          },
          "feeLevel": {
            "$ref": "#/components/schemas/FeeLevel",
            "default": "medium",
            "description": "The fee level for the withdrawal. [See details](/enums/FeeLevel)",
            "examples": [
              "medium"
            ]
          },
          "includeFee": {
            "default": "false",
            "description": "Indicates whether the fee should be included in the withdrawal amount or added on top of it",
            "examples": [
              "false"
            ],
            "type": "boolean"
          },
          "memo": {
            "description": "Memo for the transaction",
            "type": "string"
          },
          "networkFees": {
            "$ref": "#/components/schemas/RequestedNetworkFees",
            "description": "Custom network fees parameters",
            "type": "object"
          },
          "networkId": {
            "description": "The asset's blockchain network name for the transaction",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "symbol": {
            "description": "The asset's symbol for the transaction",
            "examples": [
              "BTC"
            ],
            "type": "string"
          },
          "toAccountId": {
            "description": "In case of a transfer on a different account, the ID of the destination account",
            "examples": [
              "w9jh0gf3w9qaxlre7enezt17"
            ],
            "type": "string"
          },
          "toAddress": {
            "description": "Destination address for the transaction",
            "examples": [
              "TKAduQVqNaTLyBzVvRrcctY6FFraowJ3Uc"
            ],
            "type": "string"
          },
          "toAddressBookRecordId": {
            "description": "In case of a withdrawal to address from address book, the ID of the address book record",
            "examples": [
              "a30lin1p2zr1wzqqt1l8n652"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "title": "Transfer",
        "type": "object"
      },
      "Workspace": {
        "properties": {
          "imageId": {
            "description": "Workspace image id",
            "type": "string"
          },
          "name": {
            "description": "Workspace name",
            "examples": [
              "Bron Workspace"
            ],
            "type": "string"
          },
          "tag": {
            "description": "Workspace tag",
            "examples": [
              "bron"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "The workspace ID",
            "examples": [
              "2a0f2m25qyn3cen5hj"
            ],
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "tag",
          "name"
        ],
        "type": "object"
      },
      "WorkspaceMember": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceMemberEmbedded",
            "description": "Additional data about the member",
            "type": "object"
          },
          "createdAt": {
            "description": "Created at timestamp in milliseconds",
            "examples": [
              "1741373737119"
            ],
            "type": "string"
          },
          "deactivatedAt": {
            "description": "Deactivated at timestamp in milliseconds",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/MemberStatus",
            "description": "[See details](/enums/MemberStatus)"
          },
          "updatedAt": {
            "description": "Last updated at timestamp in milliseconds",
            "examples": [
              "1743077054325"
            ],
            "type": "string"
          },
          "userId": {
            "description": "The user ID",
            "examples": [
              "b20ca4a07143d20126634d3da2c"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "The workspace ID",
            "examples": [
              "e191u51yxnykins6fahdizxy"
            ],
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "userId",
          "status",
          "createdAt"
        ],
        "type": "object"
      },
      "WorkspaceMemberEmbedded": {
        "properties": {
          "identities": {
            "description": "Member's identities",
            "items": {
              "$ref": "#/components/schemas/Identity"
            },
            "type": "array"
          },
          "permissionGroups": {
            "description": "List of permission groups the member belongs to",
            "examples": [
              "owner"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile",
            "description": "Member's user information",
            "type": "object"
          }
        },
        "type": "object"
      },
      "WorkspaceMembers": {
        "properties": {
          "members": {
            "description": "List of workspace members",
            "items": {
              "$ref": "#/components/schemas/WorkspaceMember"
            },
            "type": "array"
          }
        },
        "required": [
          "members"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": "Bron API is based on the RESTish interface provided for data exchange between a client and a server with the use of HTTPS requests and responses.",
    "title": "Bron API",
    "version": "latest"
  },
  "openapi": "3.1.0",
  "paths": {
    "/dictionary/assets": {
      "get": {
        "description": "Assets represent specific implementations of symbols on particular networks or exchanges. They are the concrete, actionable instances that users can actually hold, trade, or interact with.\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter results to only include these specific asset IDs",
            "example": [
              "1,2,3"
            ],
            "in": "query",
            "name": "assetIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter results to only include assets from these blockchain networks",
            "example": [
              "BTC,ETH"
            ],
            "in": "query",
            "name": "networkIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter results to only include assets that represent these specific symbols",
            "example": [
              "s20153"
            ],
            "in": "query",
            "name": "symbolIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by what kind of asset. [See details](/enums/AssetType)",
            "in": "query",
            "name": "assetType",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AssetType",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assets"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Assets",
        "tags": [
          "assets"
        ]
      }
    },
    "/dictionary/networks": {
      "get": {
        "description": "Networks represent the underlying blockchain infrastructure or traditional financial systems where assets can exist and be transacted.\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter results to only include these specific network IDs",
            "example": [
              "BTC,ETH"
            ],
            "in": "query",
            "name": "networkIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Networks"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Networks",
        "tags": [
          "assets"
        ]
      }
    },
    "/dictionary/symbol-market-prices": {
      "get": {
        "description": "Provides market pricing data for symbols across different quote currencies\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "The symbol IDs you want to get market prices for",
            "example": [
              "s2001,s2002"
            ],
            "in": "query",
            "name": "baseSymbolIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolMarketPrices"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Prices",
        "tags": [
          "assets"
        ]
      }
    },
    "/dictionary/symbols": {
      "get": {
        "description": "Symbols represent the fundamental identity of a financial instrument - the ticker symbol and basic metadata that identifies what something is, regardless of where it exists or how it's implemented\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter results to only include these specific symbol IDs",
            "in": "query",
            "name": "symbolIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter results to only include symbols that are used by these specific asset IDs. Useful when you want to know which symbols are available for certain assets.",
            "in": "query",
            "name": "assetIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Symbols"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Symbols",
        "tags": [
          "assets"
        ]
      }
    },
    "/stakes/": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Return stakes only for specific account",
            "in": "query",
            "name": "accountId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return stakes only for specific assetId",
            "in": "query",
            "name": "assetId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reward period",
            "example": [
              "30d"
            ],
            "in": "query",
            "name": "rewardPeriod",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stakes"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Stakes",
        "tags": [
          "stake"
        ]
      }
    },
    "/workspaces/{workspaceId}": {
      "get": {
        "description": "Retrieve information about workspace\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "List of comma-separated workspace ids",
            "in": "query",
            "name": "workspaceIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Workspace",
        "tags": [
          "workspaces"
        ]
      }
    },
    "/workspaces/{workspaceId}/accounts": {
      "get": {
        "description": "Retrieve your accounts\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter by account types. [See details](/enums/AccountType)",
            "in": "query",
            "name": "accountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by excluded account types. [See details](/enums/AccountType)",
            "in": "query",
            "name": "excludedAccountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by account statuses. [See details](/enums/AccountStatus)",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "default": "active",
              "items": {
                "$ref": "#/components/schemas/AccountStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by account id",
            "in": "query",
            "name": "accountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter only DeFi vaults",
            "in": "query",
            "name": "isDefiVault",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Offset for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by testnet flag (true - testnet, false - mainnet, null - all)",
            "in": "query",
            "name": "isTestnet",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Accounts",
        "tags": [
          "accounts"
        ]
      }
    },
    "/workspaces/{workspaceId}/accounts/{accountId}": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Retrieve Account by ID",
        "tags": [
          "accounts"
        ]
      }
    },
    "/workspaces/{workspaceId}/activities": {
      "get": {
        "description": "Retrieve information about all activities in the workspace\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter activities for specific IDs",
            "in": "query",
            "name": "accountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search string based on activity name and description",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter activities by user IDs",
            "in": "query",
            "name": "userIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter activities by activity types. [See details](/enums/ActivityType)",
            "in": "query",
            "name": "activityTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ActivityType"
              },
              "type": "array"
            }
          },
          {
            "description": "Exclude activities by activity types. [See details](/enums/ActivityType)",
            "in": "query",
            "name": "excludedActivityTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ActivityType"
              },
              "type": "array"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activities"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Activities",
        "tags": [
          "workspaces"
        ]
      }
    },
    "/workspaces/{workspaceId}/address-book-records": {
      "get": {
        "description": "Retrieve information about crypto addresses in an workspace's address book\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter by address book record IDs list",
            "in": "query",
            "name": "recordIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by network IDs",
            "example": [
              "BTC,ETH"
            ],
            "in": "query",
            "name": "networkIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by addresses",
            "example": [
              "address1,address2"
            ],
            "in": "query",
            "name": "addresses",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by memo",
            "in": "query",
            "name": "memo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": "500",
              "type": "string"
            }
          },
          {
            "description": "Offset for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by statuses. [See details](/enums/RecordStatus)",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/RecordStatus"
              },
              "type": "array"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookRecords"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Address Book records",
        "tags": [
          "address-book"
        ]
      },
      "post": {
        "description": "Save a crypto address in an workspace's address book\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressBookRecord"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create Address Book record",
        "tags": [
          "address-book"
        ]
      }
    },
    "/workspaces/{workspaceId}/address-book-records/{recordId}": {
      "delete": {
        "description": "Deactivate a crypto address in an workspace's address book\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Deactivate Address Book record",
        "tags": [
          "address-book"
        ]
      },
      "get": {
        "description": "Retrieve information about a crypto address in an workspace's address book\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Address Book record by ID",
        "tags": [
          "address-book"
        ]
      }
    },
    "/workspaces/{workspaceId}/addresses": {
      "get": {
        "description": "Retrieve information about all deposit addresses in an workspace\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "List of comma-separated address",
            "in": "query",
            "name": "addressIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "External Id",
            "in": "query",
            "name": "externalId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Types to filter. [See details](/enums/AccountType)",
            "in": "query",
            "name": "accountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Network ID to filter",
            "in": "query",
            "name": "networkId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Statuses to filter. [See details](/enums/AddressStatus)",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AddressStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "[See details](/enums/SortingDirection)",
            "in": "query",
            "name": "sortDirection",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortingDirection",
              "type": "string"
            }
          },
          {
            "description": "Limit",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addresses"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Deposit Addresses",
        "tags": [
          "addresses"
        ]
      }
    },
    "/workspaces/{workspaceId}/balances": {
      "get": {
        "description": "When you perform request without accountIds or assetId or balanceIds, the method returns all balances which has non-zero balances only\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Filter by account ids",
            "in": "query",
            "name": "accountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by balance ids",
            "in": "query",
            "name": "balanceIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter wallets by assetId",
            "in": "query",
            "name": "assetIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter wallets by networkId",
            "in": "query",
            "name": "networkId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter balances by account types. [See details](/enums/AccountType)",
            "in": "query",
            "name": "accountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Exclude balances by account types. [See details](/enums/AccountType)",
            "in": "query",
            "name": "excludedAccountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter only wallets with non-zero balance",
            "in": "query",
            "name": "nonEmpty",
            "required": false,
            "schema": {
              "default": "true",
              "type": "boolean"
            }
          },
          {
            "description": "Limit for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Offset for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balances"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get balances",
        "tags": [
          "balances"
        ]
      }
    },
    "/workspaces/{workspaceId}/balances/{balanceId}": {
      "get": {
        "description": "Fetch balance details\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "balanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get balance by ID",
        "tags": [
          "balances"
        ]
      }
    },
    "/workspaces/{workspaceId}/members": {
      "get": {
        "description": "Retrieve information about workspace members\n\n<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Embed data about members' permission groups",
            "in": "query",
            "name": "includePermissionGroups",
            "required": false,
            "schema": {
              "default": "false",
              "type": "boolean"
            }
          },
          {
            "description": "Embed data about members' user information",
            "in": "query",
            "name": "includeUsersProfiles",
            "required": false,
            "schema": {
              "default": "false",
              "type": "boolean"
            }
          },
          {
            "description": "Embed data about members' email addresses",
            "in": "query",
            "name": "includeEmails",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceMembers"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Workspace Members",
        "tags": [
          "workspaces"
        ]
      }
    },
    "/workspaces/{workspaceId}/transaction-limits": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "[See details](/enums/TransactionLimitStatus)",
            "in": "query",
            "name": "statuses",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TransactionLimitStatus"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "fromAccountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "toAddressBookRecordIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "toAccountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "appliesToUserIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "appliesToGroupIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionLimits"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Transaction Limits",
        "tags": [
          "transaction-limits"
        ]
      }
    },
    "/workspaces/{workspaceId}/transaction-limits/{limitId}": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "limitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionLimit"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Transaction Limit by ID",
        "tags": [
          "transaction-limits"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "description": "Comma-separated transaction ids",
            "in": "query",
            "name": "transactionIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated transaction types. [See details](/enums/TransactionType)",
            "in": "query",
            "name": "transactionTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TransactionType"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated account types. [See details](/enums/AccountType)",
            "in": "query",
            "name": "accountTypes",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/AccountType"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated account ids",
            "in": "query",
            "name": "accountIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated transaction statuses. [See details](/enums/TransactionStatus)",
            "in": "query",
            "name": "transactionStatuses",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TransactionStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated transaction statuses to filter out. [See details](/enums/TransactionStatus)",
            "in": "query",
            "name": "transactionStatusNotIn",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/TransactionStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "Blockchain transaction id to filter",
            "in": "query",
            "name": "blockchainTxId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account ID to where the transaction was sent to",
            "in": "query",
            "name": "toAccountId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Address to where the transaction was sent to",
            "in": "query",
            "name": "toAddress",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filer on only terminated transactions or not",
            "in": "query",
            "name": "isTerminated",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by terminated date since timestamp",
            "in": "query",
            "name": "terminatedAtFrom",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by terminated date until timestamp",
            "in": "query",
            "name": "terminatedAtTo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by created date since timestamp",
            "in": "query",
            "name": "createdAtFrom",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by created date until timestamp",
            "in": "query",
            "name": "createdAtTo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by updated date since timestamp",
            "in": "query",
            "name": "updatedAtFrom",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by updated date until timestamp",
            "in": "query",
            "name": "updatedAtTo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by deviceId that can sign this transaction",
            "in": "query",
            "name": "canSignWithDeviceId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[See details](/enums/SortingDirection)",
            "in": "query",
            "name": "sortDirection",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortingDirection",
              "type": "string"
            }
          },
          {
            "description": "Limit for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": "1000",
              "type": "string"
            }
          },
          {
            "description": "Offset for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": "0",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Transactions",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/": {
      "post": {
        "description": "Universal Create Transaction endpoint for moving on-chain assets with full control over parameters. Use it to:\n\n* Transfer base currencies (BTC, ETH, etc.) or any supported token between your own accounts.\n\n* Send funds to any external blockchain address — directly or via a saved address-book record.\n\n* Fine-tune fees and network settings.\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create Transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/bulk-create": {
      "post": {
        "description": "Bulk transactions creation. If the execution of an transaction fails, it will not affect the execution of other transactions. Failed transactions will be returned in the response. The bulk size should be less than 50 transactions.\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactions"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create Multiple Transactions",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/dry-run": {
      "post": {
        "description": "Simulate (test) transaction execution, returns estimations without executing the transaction\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Dry-Run Transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}": {
      "get": {
        "description": "<sup>API Key permissions: View only, Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get Transaction by ID",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}/cancel": {
      "post": {
        "description": "<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Cancel Transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/workspaces/{workspaceId}/transactions/{transactionId}/create-signing-request": {
      "post": {
        "description": "Create signing request for an transaction\n\n<sup>API Key permissions: Manage Transfers</sup>",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "bad-request"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "forbidden"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "The machine-readable error code",
                      "examples": [
                        "conflict"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable message providing more details about the error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create signing request",
        "tags": [
          "transactions"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "app.bron.org",
      "url": "https://api.bron.org"
    }
  ],
  "tags": [
    {
      "name": "stake"
    },
    {
      "name": "balances"
    },
    {
      "name": "addresses"
    },
    {
      "name": "assets"
    },
    {
      "name": "transaction-limits"
    },
    {
      "name": "address-book"
    },
    {
      "name": "workspaces"
    },
    {
      "name": "accounts"
    },
    {
      "name": "transactions"
    }
  ]
}
